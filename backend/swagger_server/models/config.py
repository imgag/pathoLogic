# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Config(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, cpu: int=5, queue_size: int=4, min_contig_length: int=2000, target_shortread_cov: int=150, target_longread_cov: int=150, est_genome_size: int=5300000, mode: str='unicycler', seq_padding: int=1000, cov_window: int=50):  # noqa: E501
        """Config - a model defined in Swagger

        :param cpu: The cpu of this Config.  # noqa: E501
        :type cpu: int
        :param queue_size: The queue_size of this Config.  # noqa: E501
        :type queue_size: int
        :param min_contig_length: The min_contig_length of this Config.  # noqa: E501
        :type min_contig_length: int
        :param target_shortread_cov: The target_shortread_cov of this Config.  # noqa: E501
        :type target_shortread_cov: int
        :param target_longread_cov: The target_longread_cov of this Config.  # noqa: E501
        :type target_longread_cov: int
        :param est_genome_size: The est_genome_size of this Config.  # noqa: E501
        :type est_genome_size: int
        :param mode: The mode of this Config.  # noqa: E501
        :type mode: str
        :param seq_padding: The seq_padding of this Config.  # noqa: E501
        :type seq_padding: int
        :param cov_window: The cov_window of this Config.  # noqa: E501
        :type cov_window: int
        """
        self.swagger_types = {
            'cpu': int,
            'queue_size': int,
            'min_contig_length': int,
            'target_shortread_cov': int,
            'target_longread_cov': int,
            'est_genome_size': int,
            'mode': str,
            'seq_padding': int,
            'cov_window': int
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'queue_size': 'queue_size',
            'min_contig_length': 'min_contig_length',
            'target_shortread_cov': 'target_shortread_cov',
            'target_longread_cov': 'target_longread_cov',
            'est_genome_size': 'est_genome_size',
            'mode': 'mode',
            'seq_padding': 'seq_padding',
            'cov_window': 'cov_window'
        }

        self._cpu = cpu
        self._queue_size = queue_size
        self._min_contig_length = min_contig_length
        self._target_shortread_cov = target_shortread_cov
        self._target_longread_cov = target_longread_cov
        self._est_genome_size = est_genome_size
        self._mode = mode
        self._seq_padding = seq_padding
        self._cov_window = cov_window

    @classmethod
    def from_dict(cls, dikt) -> 'Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Config of this Config.  # noqa: E501
        :rtype: Config
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu(self) -> int:
        """Gets the cpu of this Config.

        Number of threads per process  # noqa: E501

        :return: The cpu of this Config.
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu: int):
        """Sets the cpu of this Config.

        Number of threads per process  # noqa: E501

        :param cpu: The cpu of this Config.
        :type cpu: int
        """
        if cpu is not None and cpu > 40:  # noqa: E501
            raise ValueError("Invalid value for `cpu`, must be a value less than or equal to `40`")  # noqa: E501
        if cpu is not None and cpu < 1:  # noqa: E501
            raise ValueError("Invalid value for `cpu`, must be a value greater than or equal to `1`")  # noqa: E501

        self._cpu = cpu

    @property
    def queue_size(self) -> int:
        """Gets the queue_size of this Config.

        Number of concurrent processes  # noqa: E501

        :return: The queue_size of this Config.
        :rtype: int
        """
        return self._queue_size

    @queue_size.setter
    def queue_size(self, queue_size: int):
        """Sets the queue_size of this Config.

        Number of concurrent processes  # noqa: E501

        :param queue_size: The queue_size of this Config.
        :type queue_size: int
        """
        if queue_size is not None and queue_size > 20:  # noqa: E501
            raise ValueError("Invalid value for `queue_size`, must be a value less than or equal to `20`")  # noqa: E501
        if queue_size is not None and queue_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `queue_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._queue_size = queue_size

    @property
    def min_contig_length(self) -> int:
        """Gets the min_contig_length of this Config.

        Length cutoff for contigs in final result  # noqa: E501

        :return: The min_contig_length of this Config.
        :rtype: int
        """
        return self._min_contig_length

    @min_contig_length.setter
    def min_contig_length(self, min_contig_length: int):
        """Sets the min_contig_length of this Config.

        Length cutoff for contigs in final result  # noqa: E501

        :param min_contig_length: The min_contig_length of this Config.
        :type min_contig_length: int
        """
        if min_contig_length is not None and min_contig_length > 1000000:  # noqa: E501
            raise ValueError("Invalid value for `min_contig_length`, must be a value less than or equal to `1000000`")  # noqa: E501
        if min_contig_length is not None and min_contig_length < 1:  # noqa: E501
            raise ValueError("Invalid value for `min_contig_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._min_contig_length = min_contig_length

    @property
    def target_shortread_cov(self) -> int:
        """Gets the target_shortread_cov of this Config.

        Short reads are subsampled to reach this target coverage  # noqa: E501

        :return: The target_shortread_cov of this Config.
        :rtype: int
        """
        return self._target_shortread_cov

    @target_shortread_cov.setter
    def target_shortread_cov(self, target_shortread_cov: int):
        """Sets the target_shortread_cov of this Config.

        Short reads are subsampled to reach this target coverage  # noqa: E501

        :param target_shortread_cov: The target_shortread_cov of this Config.
        :type target_shortread_cov: int
        """
        if target_shortread_cov is not None and target_shortread_cov > 200:  # noqa: E501
            raise ValueError("Invalid value for `target_shortread_cov`, must be a value less than or equal to `200`")  # noqa: E501
        if target_shortread_cov is not None and target_shortread_cov < 1:  # noqa: E501
            raise ValueError("Invalid value for `target_shortread_cov`, must be a value greater than or equal to `1`")  # noqa: E501

        self._target_shortread_cov = target_shortread_cov

    @property
    def target_longread_cov(self) -> int:
        """Gets the target_longread_cov of this Config.

        Long reads are subsampled to reach this target coverage  # noqa: E501

        :return: The target_longread_cov of this Config.
        :rtype: int
        """
        return self._target_longread_cov

    @target_longread_cov.setter
    def target_longread_cov(self, target_longread_cov: int):
        """Sets the target_longread_cov of this Config.

        Long reads are subsampled to reach this target coverage  # noqa: E501

        :param target_longread_cov: The target_longread_cov of this Config.
        :type target_longread_cov: int
        """
        if target_longread_cov is not None and target_longread_cov > 200:  # noqa: E501
            raise ValueError("Invalid value for `target_longread_cov`, must be a value less than or equal to `200`")  # noqa: E501
        if target_longread_cov is not None and target_longread_cov < 1:  # noqa: E501
            raise ValueError("Invalid value for `target_longread_cov`, must be a value greater than or equal to `1`")  # noqa: E501

        self._target_longread_cov = target_longread_cov

    @property
    def est_genome_size(self) -> int:
        """Gets the est_genome_size of this Config.

        Estimated approximate final genome size of assembled bacteria. Used for coverage calculations  # noqa: E501

        :return: The est_genome_size of this Config.
        :rtype: int
        """
        return self._est_genome_size

    @est_genome_size.setter
    def est_genome_size(self, est_genome_size: int):
        """Sets the est_genome_size of this Config.

        Estimated approximate final genome size of assembled bacteria. Used for coverage calculations  # noqa: E501

        :param est_genome_size: The est_genome_size of this Config.
        :type est_genome_size: int
        """
        if est_genome_size is not None and est_genome_size > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `est_genome_size`, must be a value less than or equal to `10000000`")  # noqa: E501
        if est_genome_size is not None and est_genome_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `est_genome_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._est_genome_size = est_genome_size

    @property
    def mode(self) -> str:
        """Gets the mode of this Config.

        Different assembly methods  # noqa: E501

        :return: The mode of this Config.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode: str):
        """Sets the mode of this Config.

        Different assembly methods  # noqa: E501

        :param mode: The mode of this Config.
        :type mode: str
        """
        allowed_values = ["all", "unicycler", "spades", "miniasm", "canu", "flye"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def seq_padding(self) -> int:
        """Gets the seq_padding of this Config.

        Number of bases added at sequence ends to improve alignment quality in plasmid identification  # noqa: E501

        :return: The seq_padding of this Config.
        :rtype: int
        """
        return self._seq_padding

    @seq_padding.setter
    def seq_padding(self, seq_padding: int):
        """Sets the seq_padding of this Config.

        Number of bases added at sequence ends to improve alignment quality in plasmid identification  # noqa: E501

        :param seq_padding: The seq_padding of this Config.
        :type seq_padding: int
        """
        if seq_padding is not None and seq_padding > 10000:  # noqa: E501
            raise ValueError("Invalid value for `seq_padding`, must be a value less than or equal to `10000`")  # noqa: E501
        if seq_padding is not None and seq_padding < 1:  # noqa: E501
            raise ValueError("Invalid value for `seq_padding`, must be a value greater than or equal to `1`")  # noqa: E501

        self._seq_padding = seq_padding

    @property
    def cov_window(self) -> int:
        """Gets the cov_window of this Config.

        Window size for coverage calculation  # noqa: E501

        :return: The cov_window of this Config.
        :rtype: int
        """
        return self._cov_window

    @cov_window.setter
    def cov_window(self, cov_window: int):
        """Sets the cov_window of this Config.

        Window size for coverage calculation  # noqa: E501

        :param cov_window: The cov_window of this Config.
        :type cov_window: int
        """
        if cov_window is not None and cov_window > 5000:  # noqa: E501
            raise ValueError("Invalid value for `cov_window`, must be a value less than or equal to `5000`")  # noqa: E501
        if cov_window is not None and cov_window < 20:  # noqa: E501
            raise ValueError("Invalid value for `cov_window`, must be a value greater than or equal to `20`")  # noqa: E501

        self._cov_window = cov_window
