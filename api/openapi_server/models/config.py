# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_contig_length=2000, target_short_read_cov=150, target_long_read_cov=150, genome_size=5300000, mode='unicycler', seq_padding=1000, cov_window=50, max_length=500000, min_length=5000, mapping_cov=50):  # noqa: E501
        """Config - a model defined in OpenAPI

        :param min_contig_length: The min_contig_length of this Config.  # noqa: E501
        :type min_contig_length: int
        :param target_short_read_cov: The target_short_read_cov of this Config.  # noqa: E501
        :type target_short_read_cov: int
        :param target_long_read_cov: The target_long_read_cov of this Config.  # noqa: E501
        :type target_long_read_cov: int
        :param genome_size: The genome_size of this Config.  # noqa: E501
        :type genome_size: int
        :param mode: The mode of this Config.  # noqa: E501
        :type mode: str
        :param seq_padding: The seq_padding of this Config.  # noqa: E501
        :type seq_padding: int
        :param cov_window: The cov_window of this Config.  # noqa: E501
        :type cov_window: int
        :param max_length: The max_length of this Config.  # noqa: E501
        :type max_length: int
        :param min_length: The min_length of this Config.  # noqa: E501
        :type min_length: int
        :param mapping_cov: The mapping_cov of this Config.  # noqa: E501
        :type mapping_cov: int
        """
        self.openapi_types = {
            'min_contig_length': int,
            'target_short_read_cov': int,
            'target_long_read_cov': int,
            'genome_size': int,
            'mode': str,
            'seq_padding': int,
            'cov_window': int,
            'max_length': int,
            'min_length': int,
            'mapping_cov': int
        }

        self.attribute_map = {
            'min_contig_length': 'minContigLength',
            'target_short_read_cov': 'targetShortReadCov',
            'target_long_read_cov': 'targetLongReadCov',
            'genome_size': 'genomeSize',
            'mode': 'mode',
            'seq_padding': 'seqPadding',
            'cov_window': 'covWindow',
            'max_length': 'maxLength',
            'min_length': 'minLength',
            'mapping_cov': 'mappingCov'
        }

        self._min_contig_length = min_contig_length
        self._target_short_read_cov = target_short_read_cov
        self._target_long_read_cov = target_long_read_cov
        self._genome_size = genome_size
        self._mode = mode
        self._seq_padding = seq_padding
        self._cov_window = cov_window
        self._max_length = max_length
        self._min_length = min_length
        self._mapping_cov = mapping_cov

    @classmethod
    def from_dict(cls, dikt) -> 'Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Config of this Config.  # noqa: E501
        :rtype: Config
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_contig_length(self):
        """Gets the min_contig_length of this Config.

        Length cutoff for contigs in final result  # noqa: E501

        :return: The min_contig_length of this Config.
        :rtype: int
        """
        return self._min_contig_length

    @min_contig_length.setter
    def min_contig_length(self, min_contig_length):
        """Sets the min_contig_length of this Config.

        Length cutoff for contigs in final result  # noqa: E501

        :param min_contig_length: The min_contig_length of this Config.
        :type min_contig_length: int
        """
        if min_contig_length is not None and min_contig_length > 1000000:  # noqa: E501
            raise ValueError("Invalid value for `min_contig_length`, must be a value less than or equal to `1000000`")  # noqa: E501
        if min_contig_length is not None and min_contig_length < 1:  # noqa: E501
            raise ValueError("Invalid value for `min_contig_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._min_contig_length = min_contig_length

    @property
    def target_short_read_cov(self):
        """Gets the target_short_read_cov of this Config.

        Short reads are subsampled to reach this target coverage  # noqa: E501

        :return: The target_short_read_cov of this Config.
        :rtype: int
        """
        return self._target_short_read_cov

    @target_short_read_cov.setter
    def target_short_read_cov(self, target_short_read_cov):
        """Sets the target_short_read_cov of this Config.

        Short reads are subsampled to reach this target coverage  # noqa: E501

        :param target_short_read_cov: The target_short_read_cov of this Config.
        :type target_short_read_cov: int
        """
        if target_short_read_cov is not None and target_short_read_cov > 200:  # noqa: E501
            raise ValueError("Invalid value for `target_short_read_cov`, must be a value less than or equal to `200`")  # noqa: E501
        if target_short_read_cov is not None and target_short_read_cov < 1:  # noqa: E501
            raise ValueError("Invalid value for `target_short_read_cov`, must be a value greater than or equal to `1`")  # noqa: E501

        self._target_short_read_cov = target_short_read_cov

    @property
    def target_long_read_cov(self):
        """Gets the target_long_read_cov of this Config.

        Long reads are subsampled to reach this target coverage  # noqa: E501

        :return: The target_long_read_cov of this Config.
        :rtype: int
        """
        return self._target_long_read_cov

    @target_long_read_cov.setter
    def target_long_read_cov(self, target_long_read_cov):
        """Sets the target_long_read_cov of this Config.

        Long reads are subsampled to reach this target coverage  # noqa: E501

        :param target_long_read_cov: The target_long_read_cov of this Config.
        :type target_long_read_cov: int
        """
        if target_long_read_cov is not None and target_long_read_cov > 200:  # noqa: E501
            raise ValueError("Invalid value for `target_long_read_cov`, must be a value less than or equal to `200`")  # noqa: E501
        if target_long_read_cov is not None and target_long_read_cov < 1:  # noqa: E501
            raise ValueError("Invalid value for `target_long_read_cov`, must be a value greater than or equal to `1`")  # noqa: E501

        self._target_long_read_cov = target_long_read_cov

    @property
    def genome_size(self):
        """Gets the genome_size of this Config.

        Estimated approximate final genome size of assembled bacteria. Used for coverage calculations  # noqa: E501

        :return: The genome_size of this Config.
        :rtype: int
        """
        return self._genome_size

    @genome_size.setter
    def genome_size(self, genome_size):
        """Sets the genome_size of this Config.

        Estimated approximate final genome size of assembled bacteria. Used for coverage calculations  # noqa: E501

        :param genome_size: The genome_size of this Config.
        :type genome_size: int
        """
        if genome_size is not None and genome_size > 10000000:  # noqa: E501
            raise ValueError("Invalid value for `genome_size`, must be a value less than or equal to `10000000`")  # noqa: E501
        if genome_size is not None and genome_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `genome_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._genome_size = genome_size

    @property
    def mode(self):
        """Gets the mode of this Config.

        Different assembly methods  # noqa: E501

        :return: The mode of this Config.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Config.

        Different assembly methods  # noqa: E501

        :param mode: The mode of this Config.
        :type mode: str
        """
        allowed_values = ["all", "unicycler", "spades", "miniasm", "canu", "flye"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def seq_padding(self):
        """Gets the seq_padding of this Config.

        Number of bases added at sequence ends to improve alignment quality in plasmid identification  # noqa: E501

        :return: The seq_padding of this Config.
        :rtype: int
        """
        return self._seq_padding

    @seq_padding.setter
    def seq_padding(self, seq_padding):
        """Sets the seq_padding of this Config.

        Number of bases added at sequence ends to improve alignment quality in plasmid identification  # noqa: E501

        :param seq_padding: The seq_padding of this Config.
        :type seq_padding: int
        """
        if seq_padding is not None and seq_padding > 10000:  # noqa: E501
            raise ValueError("Invalid value for `seq_padding`, must be a value less than or equal to `10000`")  # noqa: E501
        if seq_padding is not None and seq_padding < 1:  # noqa: E501
            raise ValueError("Invalid value for `seq_padding`, must be a value greater than or equal to `1`")  # noqa: E501

        self._seq_padding = seq_padding

    @property
    def cov_window(self):
        """Gets the cov_window of this Config.

        Window size for coverage calculation  # noqa: E501

        :return: The cov_window of this Config.
        :rtype: int
        """
        return self._cov_window

    @cov_window.setter
    def cov_window(self, cov_window):
        """Sets the cov_window of this Config.

        Window size for coverage calculation  # noqa: E501

        :param cov_window: The cov_window of this Config.
        :type cov_window: int
        """
        if cov_window is not None and cov_window > 5000:  # noqa: E501
            raise ValueError("Invalid value for `cov_window`, must be a value less than or equal to `5000`")  # noqa: E501
        if cov_window is not None and cov_window < 20:  # noqa: E501
            raise ValueError("Invalid value for `cov_window`, must be a value greater than or equal to `20`")  # noqa: E501

        self._cov_window = cov_window

    @property
    def max_length(self):
        """Gets the max_length of this Config.

        Maximum contig length considered plasmid search  # noqa: E501

        :return: The max_length of this Config.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this Config.

        Maximum contig length considered plasmid search  # noqa: E501

        :param max_length: The max_length of this Config.
        :type max_length: int
        """
        if max_length is not None and max_length > 1000000:  # noqa: E501
            raise ValueError("Invalid value for `max_length`, must be a value less than or equal to `1000000`")  # noqa: E501
        if max_length is not None and max_length < 2000:  # noqa: E501
            raise ValueError("Invalid value for `max_length`, must be a value greater than or equal to `2000`")  # noqa: E501

        self._max_length = max_length

    @property
    def min_length(self):
        """Gets the min_length of this Config.

        Minimum contig length considered plasmid search  # noqa: E501

        :return: The min_length of this Config.
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this Config.

        Minimum contig length considered plasmid search  # noqa: E501

        :param min_length: The min_length of this Config.
        :type min_length: int
        """
        if min_length is not None and min_length > 1000000:  # noqa: E501
            raise ValueError("Invalid value for `min_length`, must be a value less than or equal to `1000000`")  # noqa: E501
        if min_length is not None and min_length < 2000:  # noqa: E501
            raise ValueError("Invalid value for `min_length`, must be a value greater than or equal to `2000`")  # noqa: E501

        self._min_length = min_length

    @property
    def mapping_cov(self):
        """Gets the mapping_cov of this Config.

        Target average mean coverage  # noqa: E501

        :return: The mapping_cov of this Config.
        :rtype: int
        """
        return self._mapping_cov

    @mapping_cov.setter
    def mapping_cov(self, mapping_cov):
        """Sets the mapping_cov of this Config.

        Target average mean coverage  # noqa: E501

        :param mapping_cov: The mapping_cov of this Config.
        :type mapping_cov: int
        """
        if mapping_cov is not None and mapping_cov > 200:  # noqa: E501
            raise ValueError("Invalid value for `mapping_cov`, must be a value less than or equal to `200`")  # noqa: E501
        if mapping_cov is not None and mapping_cov < 20:  # noqa: E501
            raise ValueError("Invalid value for `mapping_cov`, must be a value greater than or equal to `20`")  # noqa: E501

        self._mapping_cov = mapping_cov
